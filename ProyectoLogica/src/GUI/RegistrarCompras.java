/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Logica.Cliente;
import Logica.Producto;
import Logica.Tienda;
import Logica.Compra;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class RegistrarCompras extends javax.swing.JFrame {
    
    private Tienda tienda;
    private ArrayList<Producto> productosSeleccionados;
    private ArrayList<Integer> cantidadesSeleccionadas;
    private double totalCompra;
    
    public RegistrarCompras(Tienda tienda) {
        initComponents();
        this.tienda = tienda;
        this.productosSeleccionados = new ArrayList<>();
        this.cantidadesSeleccionadas = new ArrayList<>();
        this.totalCompra = 0;
        cargarClientes();
        cargarProductos();
    }
    
    private void cargarClientes() {
        seleccionarCliente.removeAllItems();
        for (Cliente cliente : tienda.getClientes()) {
            seleccionarCliente.addItem(cliente.getNombre());
        }
    }
    
    private void cargarProductos() {
        seleccionarProducto.removeAllItems();
        for (Producto producto : tienda.getProductos()) {
            seleccionarProducto.addItem(producto.getReferencia());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        seleccionarCliente = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        seleccionarProducto = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cantidad = new javax.swing.JTextField();
        agregarProducto = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        totalDescuento = new javax.swing.JTextField();
        guardarCompra = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        fecha = new javax.swing.JTextField();

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setText("REGISTRAR COMPRAS");

        jLabel2.setText("CLIENTE:");

        seleccionarCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        seleccionarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarClienteActionPerformed(evt);
            }
        });

        jLabel3.setText("PRODUCTO:");

        jLabel4.setText("CANTIDAD:");

        agregarProducto.setText("AGREGAR");
        agregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarProductoActionPerformed(evt);
            }
        });

        jLabel5.setText("TOTAL:");

        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });

        jLabel6.setText("TOTAL CON DESCUENTO:");

        guardarCompra.setText("FINALIZAR COMPRA");
        guardarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarCompraActionPerformed(evt);
            }
        });

        jLabel7.setText("FECHA:");

        fecha.setText("DD/MM/YY");
        fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(173, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(seleccionarCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(seleccionarProducto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(guardarCompra)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(agregarProducto)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(17, 17, 17))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(seleccionarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(seleccionarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(agregarProducto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(totalDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(guardarCompra)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {
        // Este método no necesita implementación ya que el campo es de solo lectura
    }
    
    private void seleccionarClienteActionPerformed(java.awt.event.ActionEvent evt) {
        // Actualizar el descuento si cambia el cliente
        if (totalCompra > 0) {
            Cliente clienteSeleccionado = null;
            String nombreCliente = seleccionarCliente.getSelectedItem().toString();
            for (Cliente c : tienda.getClientes()) {
                if (c.getNombre().equals(nombreCliente)) {
                    clienteSeleccionado = c;
                    break;
                }
            }
            
            if (clienteSeleccionado != null && clienteSeleccionado.esCumpleanios(fecha.getText())) {
                double totalConDescuento = totalCompra * 0.8; // 20% de descuento
                totalDescuento.setText(String.valueOf(totalConDescuento));
            } else {
                totalDescuento.setText(String.valueOf(totalCompra));
            }
        }
    }

    private void fechaActionPerformed(java.awt.event.ActionEvent evt) {
        // Actualizar el descuento si cambia la fecha
        seleccionarClienteActionPerformed(evt);
    }

    private void guardarCompraActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            // Validar que haya productos seleccionados
            if (productosSeleccionados.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay productos seleccionados");
                return;
            }

            // Validar que se haya seleccionado un cliente
            if (seleccionarCliente.getSelectedItem() == null || seleccionarCliente.getSelectedItem().toString().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor seleccione un cliente");
                return;
            }

            // Validar que la fecha sea válida
            String fechaCompra = fecha.getText();
            if (fechaCompra.equals("DD/MM/YY") || fechaCompra.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor ingrese una fecha válida");
                return;
            }

            // Buscar el cliente seleccionado
            String nombreCliente = seleccionarCliente.getSelectedItem().toString();
            Cliente clienteSeleccionado = null;
            for (Cliente c : tienda.getClientes()) {
                if (c.getNombre().equals(nombreCliente)) {
                    clienteSeleccionado = c;
                    break;
                }
            }

            if (clienteSeleccionado != null) {
                // Crear la nueva compra
                Compra nuevaCompra = new Compra(
                    fechaCompra,
                    clienteSeleccionado,
                    new ArrayList<>(productosSeleccionados),
                    new ArrayList<>(cantidadesSeleccionadas),
                    totalCompra,
                    Double.parseDouble(totalDescuento.getText())
                );

                // Actualizar el inventario
                for (int i = 0; i < productosSeleccionados.size(); i++) {
                    Producto p = productosSeleccionados.get(i);
                    int cant = cantidadesSeleccionadas.get(i);
                    p.disminuirCantidad(cant);
                }

                // Registrar la compra en la tienda
                tienda.registrarCompra(nuevaCompra);

                // Limpiar todos los campos
                productosSeleccionados.clear();
                cantidadesSeleccionadas.clear();
                totalCompra = 0;
                total.setText("");
                totalDescuento.setText("");
                cantidad.setText("");
                fecha.setText("DD/MM/YY");
                seleccionarCliente.setSelectedIndex(0);
                seleccionarProducto.setSelectedIndex(0);

                JOptionPane.showMessageDialog(this, "Compra registrada exitosamente");
            } else {
                JOptionPane.showMessageDialog(this, "Error: Cliente no encontrado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al registrar la compra: " + e.getMessage());
        }
    }

    private void agregarProductoActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String referencia = seleccionarProducto.getSelectedItem().toString();
            int cantidadSeleccionada = Integer.parseInt(cantidad.getText());
        
        Producto productoSeleccionado = null;
        for (Producto p : tienda.getProductos()) {
            if (p.getReferencia().equals(referencia)) {
                productoSeleccionado = p;
                break;
            }
        }
        
        if (productoSeleccionado != null) {
            if (cantidadSeleccionada <= productoSeleccionado.getCantidadDisponible()) {
                productosSeleccionados.add(productoSeleccionado);
                cantidadesSeleccionadas.add(cantidadSeleccionada);
                totalCompra += productoSeleccionado.getPrecio() * cantidadSeleccionada;
                
                total.setText(String.valueOf(totalCompra));
                cantidad.setText("");
                
                // Calcular descuento si es el cumpleaños del cliente
                Cliente clienteSeleccionado = null;
                String nombreCliente = seleccionarCliente.getSelectedItem().toString();
                for (Cliente c : tienda.getClientes()) {
                    if (c.getNombre().equals(nombreCliente)) {
                        clienteSeleccionado = c;
                        break;
                    }
                }
                
                if (clienteSeleccionado != null && clienteSeleccionado.esCumpleanios(fecha.getText())) {
                    double totalConDescuento = totalCompra * 0.8; // 20% de descuento
                    totalDescuento.setText(String.valueOf(totalConDescuento));
                } else {
                    totalDescuento.setText(String.valueOf(totalCompra));
                }
                
                JOptionPane.showMessageDialog(this, "Producto agregado correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "No hay suficiente cantidad disponible");
            }
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor ingrese una cantidad válida");
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarProducto;
    private javax.swing.JTextField cantidad;
    private javax.swing.JTextField fecha;
    private javax.swing.JButton guardarCompra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> seleccionarCliente;
    private javax.swing.JComboBox<String> seleccionarProducto;
    private javax.swing.JTextField total;
    private javax.swing.JTextField totalDescuento;
    // End of variables declaration//GEN-END:variables
}
